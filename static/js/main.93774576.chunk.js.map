{"version":3,"sources":["components/Employee/Employee.js","utils/API.js","container/UserContainer.js","components/Jumbotron/Jumbotron.js","components/Wrapper/index.js","components/Searchbar/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","className","onClick","sortUsers","users","map","login","name","picture","email","phone","key","uuid","src","large","alt","first","last","axios","get","UserContainer","state","result","filter","showResult","alpha","getUsers","API","then","res","setState","data","results","catch","err","console","log","comparsion","a","b","userA","toLowerCase","userB","sort","comparsionRev","sortUsersRev","sortAlpha","this","Component","Jumbotron","Wrapper","SearchBar","type","id","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.93774576.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Employee(props) {\n    return (\n        <div className=\"container-fluid\">\n            <div>\n                <table className=\"table table-bordered\">\n                    <thead>\n                        <tr className=\"d-flex\">\n                            <th className=\"col-sm-3\">Employee</th>\n                            <th className=\"col-sm-3\"><span onClick={props.sortUsers}>Name</span></th>\n                            <th className=\"col-sm-3\">Phone</th>\n                            <th className=\"col-sm-3\">Email</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.users.map(({ login, name, picture, email, phone }) => {\n                            return (\n                            <tr className=\"d-flex\" key={login.uuid}>\n                                <th className=\"col-sm-3\"><img src={picture.large} alt=\"employee\" /></th>\n                                <td className=\"col-sm-3\">{name.first} {name.last}</td>\n                                <td className=\"col-sm-3\">{phone}</td>\n                                <td className=\"col-sm-3\">{email}</td>\n                            </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Employee;","import axios from \"axios\";\n\nconst BASEURL = 'https://randomuser.me/api/?results=50&nat=us';\n\nexport default {\n    search: function() {\n        return axios.get(BASEURL);\n    }\n}","import React, { Component } from 'react';\nimport Employee from '../components/Employee/Employee';\nimport API from '../utils/API';\n\nclass UserContainer extends Component {\n    state = {\n        result: [],\n        filter: '',\n        showResult: [],\n        alpha: false\n    }\n\ngetUsers = () => {\n    API.search().then(res => {\n        this.setState({result: res.data.results});\n        this.setState({showResult: res.data.results})\n    })\n    .catch(err => console.log(err))\n}\n\ncomponentDidMount() {\n    this.getUsers();\n}\n\nfilter = () => {\n    // create a state to track whether to show just male, female, or all employees\n    const currentFilter = this.state.filter;\n    if (currentFilter === ''){\n        this.setState({showResult: this.state.result});\n        this.setState({filter: ''});\n    }\n}\n\ncomparsion = (a, b) => {\n    const userA = a.name.first.toLowerCase();\n    const userB = b.name.first.toLowerCase();\n    let comparsion = 0;\n\n    if(userA > userB) {\n        comparsion = 1;\n    } else if (userA < userB) {\n        comparsion = -1;\n    }\n    return comparsion;\n}\n\nsortUsers = () => {\n    this.setState({showResult: this.state.showResult.sort(this.comparsion)});\n    this.setState({alpha: true})\n}\ncomparsionRev = (a, b) => {\n    const userA = a.name.first.toLowerCase();\n    const userB = b.name.first.toLowerCase();\n    let comparsion =0;\n\n    if(userA > userB) {\n        comparsion = 1;\n    } else if (userA < userB) {\n        comparsion = -1;\n    }\n    return comparsion * -1;\n}\nsortUsersRev = () => {\n    this.setState({showResult: this.state.showResult.sort(this.comparsionRev)});\n    this.setState({alpha: false})\n}\n\nsortAlpha = () => {\n    if(this.state.alpha === false) {\n        this.sortUsers();\n    } else {\n        this.sortUsersRev();\n    }\n}\n\nrender() {\n    return (\n        <div className=\"header\">\n            <Employee\n                users={this.state.showResult}\n                sortUsers={this.sortAlpha}\n                filter={this.filter}\n            />\n        </div>\n    )\n}\n}\n\nexport default UserContainer;","import React from \"react\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid bg-dark\">\n        <div className=\"container-fluid\">\n            <h1 className=\"text-center text-white\">Employee Directory</h1>\n            <h5 className=\"text-center text-white\">Filter by heading or use search bar to narrow results.</h5>\n        </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from 'react';\n\nfunction SearchBar() {\n    return (\n        <div className=\"container\">\n        <div className=\"row justify-content-center\">\n            <div className=\"col-lg-4 col-md-4 col-sm-6\">\n                <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Employee Search\"></input>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React from 'react';\nimport UserContainer from './container/UserContainer'\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Wrapper from './components/Wrapper';\nimport SearchBar from './components/Searchbar/SearchBar';\n\n\nfunction App() {\n  return (\n        <div>\n          <Jumbotron />\n          <SearchBar />\n          <br />\n          <Wrapper>\n          <UserContainer />\n          </Wrapper>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}